/**
 * PRIDE Proteomes RESTful web service API
 * For more details and examples please see the <a href=\"/pride/help/proteomes/access/webservice\">additional documentation pages</a>
 *
 * OpenAPI spec version: 1.0
 * Contact: pride-support@ebi.ac.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package uk.ac.ebi.pride.proteomes.web;

import uk.ac.ebi.pride.proteomes.web.ApiCallback;
import uk.ac.ebi.pride.proteomes.web.ApiClient;
import uk.ac.ebi.pride.proteomes.web.ApiException;
import uk.ac.ebi.pride.proteomes.web.ApiResponse;
import uk.ac.ebi.pride.proteomes.web.Configuration;
import uk.ac.ebi.pride.proteomes.web.Pair;
import uk.ac.ebi.pride.proteomes.web.ProgressRequestBody;
import uk.ac.ebi.pride.proteomes.web.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import uk.ac.ebi.pride.proteomes.web.client.PeptideList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PeptidecontrollerApi {
    private ApiClient apiClient;

    public PeptidecontrollerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PeptidecontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getByIdUsingGET1 */
    private com.squareup.okhttp.Call getByIdUsingGET1Call(String sequence, Integer species, String tissue, String mod, Boolean includeDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sequence' is set
        if (sequence == null) {
            throw new ApiException("Missing the required parameter 'sequence' when calling getByIdUsingGET1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/peptide/{sequence}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "sequence" + "\\}", apiClient.escapeString(sequence.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (species != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "species", species));
        if (tissue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tissue", tissue));
        if (mod != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mod", mod));
        if (includeDetails != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeDetails", includeDetails));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getById
     * 
     * @param sequence sequence (required)
     * @param species species (optional, default to 9606)
     * @param tissue tissue (optional, default to any)
     * @param mod mod (optional, default to any)
     * @param includeDetails includeDetails (optional, default to true)
     * @return PeptideList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PeptideList getByIdUsingGET1(String sequence, Integer species, String tissue, String mod, Boolean includeDetails) throws ApiException {
        ApiResponse<PeptideList> resp = getByIdUsingGET1WithHttpInfo(sequence, species, tissue, mod, includeDetails);
        return resp.getData();
    }

    /**
     * getById
     * 
     * @param sequence sequence (required)
     * @param species species (optional, default to 9606)
     * @param tissue tissue (optional, default to any)
     * @param mod mod (optional, default to any)
     * @param includeDetails includeDetails (optional, default to true)
     * @return ApiResponse&lt;PeptideList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PeptideList> getByIdUsingGET1WithHttpInfo(String sequence, Integer species, String tissue, String mod, Boolean includeDetails) throws ApiException {
        com.squareup.okhttp.Call call = getByIdUsingGET1Call(sequence, species, tissue, mod, includeDetails, null, null);
        Type localVarReturnType = new TypeToken<PeptideList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getById (asynchronously)
     * 
     * @param sequence sequence (required)
     * @param species species (optional, default to 9606)
     * @param tissue tissue (optional, default to any)
     * @param mod mod (optional, default to any)
     * @param includeDetails includeDetails (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getByIdUsingGET1Async(String sequence, Integer species, String tissue, String mod, Boolean includeDetails, final ApiCallback<PeptideList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getByIdUsingGET1Call(sequence, species, tissue, mod, includeDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PeptideList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPeptideListForProteinUsingGET1 */
    private com.squareup.okhttp.Call getPeptideListForProteinUsingGET1Call(String acc, String tissue, String mod, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'acc' is set
        if (acc == null) {
            throw new ApiException("Missing the required parameter 'acc' when calling getPeptideListForProteinUsingGET1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/peptide/list/protein/{acc}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "acc" + "\\}", apiClient.escapeString(acc.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tissue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tissue", tissue));
        if (mod != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mod", mod));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getPeptideListForProtein
     * 
     * @param acc acc (required)
     * @param tissue tissue (optional, default to any)
     * @param mod mod (optional, default to any)
     * @return PeptideList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PeptideList getPeptideListForProteinUsingGET1(String acc, String tissue, String mod) throws ApiException {
        ApiResponse<PeptideList> resp = getPeptideListForProteinUsingGET1WithHttpInfo(acc, tissue, mod);
        return resp.getData();
    }

    /**
     * getPeptideListForProtein
     * 
     * @param acc acc (required)
     * @param tissue tissue (optional, default to any)
     * @param mod mod (optional, default to any)
     * @return ApiResponse&lt;PeptideList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PeptideList> getPeptideListForProteinUsingGET1WithHttpInfo(String acc, String tissue, String mod) throws ApiException {
        com.squareup.okhttp.Call call = getPeptideListForProteinUsingGET1Call(acc, tissue, mod, null, null);
        Type localVarReturnType = new TypeToken<PeptideList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getPeptideListForProtein (asynchronously)
     * 
     * @param acc acc (required)
     * @param tissue tissue (optional, default to any)
     * @param mod mod (optional, default to any)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPeptideListForProteinUsingGET1Async(String acc, String tissue, String mod, final ApiCallback<PeptideList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPeptideListForProteinUsingGET1Call(acc, tissue, mod, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PeptideList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPeptideListUsingGET */
    private com.squareup.okhttp.Call getPeptideListUsingGETCall(Integer species, String tissue, String mod, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/peptide/list".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (species != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "species", species));
        if (tissue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tissue", tissue));
        if (mod != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mod", mod));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getPeptideList
     * 
     * @param species species (optional, default to 9606)
     * @param tissue tissue (optional, default to any)
     * @param mod mod (optional, default to any)
     * @param page page (optional, default to 0)
     * @param pageSize pageSize (optional, default to 100)
     * @return PeptideList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PeptideList getPeptideListUsingGET(Integer species, String tissue, String mod, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<PeptideList> resp = getPeptideListUsingGETWithHttpInfo(species, tissue, mod, page, pageSize);
        return resp.getData();
    }

    /**
     * getPeptideList
     * 
     * @param species species (optional, default to 9606)
     * @param tissue tissue (optional, default to any)
     * @param mod mod (optional, default to any)
     * @param page page (optional, default to 0)
     * @param pageSize pageSize (optional, default to 100)
     * @return ApiResponse&lt;PeptideList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PeptideList> getPeptideListUsingGETWithHttpInfo(Integer species, String tissue, String mod, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getPeptideListUsingGETCall(species, tissue, mod, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PeptideList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getPeptideList (asynchronously)
     * 
     * @param species species (optional, default to 9606)
     * @param tissue tissue (optional, default to any)
     * @param mod mod (optional, default to any)
     * @param page page (optional, default to 0)
     * @param pageSize pageSize (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPeptideListUsingGETAsync(Integer species, String tissue, String mod, Integer page, Integer pageSize, final ApiCallback<PeptideList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPeptideListUsingGETCall(species, tissue, mod, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PeptideList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
