/**
 * PRIDE Proteomes RESTful web service API
 * For more details and examples please see the <a href=\"/pride/help/proteomes/access/webservice\">additional documentation pages</a>
 *
 * OpenAPI spec version: 1.0
 * Contact: pride-support@ebi.ac.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package uk.ac.ebi.pride.proteomes.web;

import uk.ac.ebi.pride.proteomes.web.ApiCallback;
import uk.ac.ebi.pride.proteomes.web.ApiClient;
import uk.ac.ebi.pride.proteomes.web.ApiException;
import uk.ac.ebi.pride.proteomes.web.ApiResponse;
import uk.ac.ebi.pride.proteomes.web.Configuration;
import uk.ac.ebi.pride.proteomes.web.Pair;
import uk.ac.ebi.pride.proteomes.web.ProgressRequestBody;
import uk.ac.ebi.pride.proteomes.web.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import uk.ac.ebi.pride.proteomes.web.client.ProteinGroup;
import uk.ac.ebi.pride.proteomes.web.client.ProteinGroupList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProteingroupcontrollerApi {
    private ApiClient apiClient;

    public ProteingroupcontrollerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProteingroupcontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getByIdUsingGET4 */
    private com.squareup.okhttp.Call getByIdUsingGET4Call(String id, Boolean uniquePeptides, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getByIdUsingGET4(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/group/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (uniquePeptides != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "uniquePeptides", uniquePeptides));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getById
     * 
     * @param id id (required)
     * @param uniquePeptides uniquePeptides (optional, default to true)
     * @return ProteinGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProteinGroup getByIdUsingGET4(String id, Boolean uniquePeptides) throws ApiException {
        ApiResponse<ProteinGroup> resp = getByIdUsingGET4WithHttpInfo(id, uniquePeptides);
        return resp.getData();
    }

    /**
     * getById
     * 
     * @param id id (required)
     * @param uniquePeptides uniquePeptides (optional, default to true)
     * @return ApiResponse&lt;ProteinGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProteinGroup> getByIdUsingGET4WithHttpInfo(String id, Boolean uniquePeptides) throws ApiException {
        com.squareup.okhttp.Call call = getByIdUsingGET4Call(id, uniquePeptides, null, null);
        Type localVarReturnType = new TypeToken<ProteinGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getById (asynchronously)
     * 
     * @param id id (required)
     * @param uniquePeptides uniquePeptides (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getByIdUsingGET4Async(String id, Boolean uniquePeptides, final ApiCallback<ProteinGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getByIdUsingGET4Call(id, uniquePeptides, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProteinGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProteinGroupListForProteinUsingGET */
    private com.squareup.okhttp.Call getProteinGroupListForProteinUsingGETCall(String acc, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'acc' is set
        if (acc == null) {
            throw new ApiException("Missing the required parameter 'acc' when calling getProteinGroupListForProteinUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/group/list/protein/{acc}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "acc" + "\\}", apiClient.escapeString(acc.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getProteinGroupListForProtein
     * 
     * @param acc acc (required)
     * @return ProteinGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProteinGroupList getProteinGroupListForProteinUsingGET(String acc) throws ApiException {
        ApiResponse<ProteinGroupList> resp = getProteinGroupListForProteinUsingGETWithHttpInfo(acc);
        return resp.getData();
    }

    /**
     * getProteinGroupListForProtein
     * 
     * @param acc acc (required)
     * @return ApiResponse&lt;ProteinGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProteinGroupList> getProteinGroupListForProteinUsingGETWithHttpInfo(String acc) throws ApiException {
        com.squareup.okhttp.Call call = getProteinGroupListForProteinUsingGETCall(acc, null, null);
        Type localVarReturnType = new TypeToken<ProteinGroupList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getProteinGroupListForProtein (asynchronously)
     * 
     * @param acc acc (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProteinGroupListForProteinUsingGETAsync(String acc, final ApiCallback<ProteinGroupList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProteinGroupListForProteinUsingGETCall(acc, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProteinGroupList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProteinGroupListUsingGET1 */
    private com.squareup.okhttp.Call getProteinGroupListUsingGET1Call(Integer species, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/group/list".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (species != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "species", species));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getProteinGroupList
     * 
     * @param species species (optional, default to 9606)
     * @param page page (optional, default to 0)
     * @param pageSize pageSize (optional, default to 100)
     * @return ProteinGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProteinGroupList getProteinGroupListUsingGET1(Integer species, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<ProteinGroupList> resp = getProteinGroupListUsingGET1WithHttpInfo(species, page, pageSize);
        return resp.getData();
    }

    /**
     * getProteinGroupList
     * 
     * @param species species (optional, default to 9606)
     * @param page page (optional, default to 0)
     * @param pageSize pageSize (optional, default to 100)
     * @return ApiResponse&lt;ProteinGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProteinGroupList> getProteinGroupListUsingGET1WithHttpInfo(Integer species, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getProteinGroupListUsingGET1Call(species, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<ProteinGroupList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getProteinGroupList (asynchronously)
     * 
     * @param species species (optional, default to 9606)
     * @param page page (optional, default to 0)
     * @param pageSize pageSize (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProteinGroupListUsingGET1Async(Integer species, Integer page, Integer pageSize, final ApiCallback<ProteinGroupList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProteinGroupListUsingGET1Call(species, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProteinGroupList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
